<?xml version="1.0" encoding="UTF-8"?>
<!-- 

 ~ Copyright (c) 2019 Dr. Krusche & Partner PartG. All rights reserved.
 ~ 
 ~ Licensed under the Apache License, Version 2.0 (the "License"); you may not
 ~ use this file except in compliance with the License. You may obtain a copy of
 ~ the License at
 ~ 
 ~ http://www.apache.org/licenses/LICENSE-2.0
 ~ 
 ~ Unless required by applicable law or agreed to in writing, software
 ~ distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 ~ WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 ~ License for the specific language governing permissions and limitations under
 ~ the License.
 ~  
 ~ @author Stefan Krusche, Dr. Krusche & Partner PartG
 ~  

-->

<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <parent>
    <groupId>de.kp.works</groupId>
    <artifactId>cdap-spark</artifactId>
    <version>0.3.0</version>
	<relativePath>../pom.xml</relativePath>    
  </parent>

  <artifactId>works-rules</artifactId>
  <packaging>jar</packaging>
  
  <name>Works Rules</name>
  <description>Business rules support for CDAP-Spark.</description>

  <properties>

    <main.basedir>${project.basedir}</main.basedir>

    <app.parents>system:cdap-data-pipeline[6.2.0,6.2.0],system:cdap-data-streams[6.2.0,6.2.0]</app.parents>
    <docs.dir>docs</docs.dir>
    <widgets.dir>widgets</widgets.dir>

    <drools.version>7.15.0.Final</drools.version>

  </properties>

  <dependencies>
      
    <!-- drools compiler -->
    <dependency>
	  <groupId>org.drools</groupId>
	  <artifactId>drools-compiler</artifactId>
	  <version>${drools.version}</version>
    </dependency>
    
    <!-- drools compiler dependency -->
	<dependency>
	   <groupId>org.eclipse.jdt.core.compiler</groupId>
	   <artifactId>ecj</artifactId>
	   <version>4.6.1</version>
	</dependency> 

  </dependencies>
  
  <build>
    <pluginManagement>
      <plugins>
        <!-- maven surefire -->
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-surefire-plugin</artifactId>
          <version>2.14.1</version>
          <configuration>
            <argLine>-Xmx2048m -Djava.awt.headless=true</argLine>
            <!--
            <redirectTestOutputToFile>${surefire.redirectTestOutputToFile}</redirectTestOutputToFile>
            -->
            <reuseForks>false</reuseForks>
            <reportFormat>plain</reportFormat>
            <systemPropertyVariables>
              <java.io.tmpdir>${project.build.directory}</java.io.tmpdir>
            </systemPropertyVariables>
          </configuration>
        </plugin>
        <!-- maven bundle -->
        <plugin>
          <groupId>org.apache.felix</groupId>
          <artifactId>maven-bundle-plugin</artifactId>
          <version>3.3.0</version>
          <extensions>true</extensions>
          <configuration>
            <instructions>
              <Embed-Dependency>*;inline=false;scope=compile</Embed-Dependency>
              <Embed-Transitive>true</Embed-Transitive>
              <Embed-Directory>lib</Embed-Directory>
              <!--Only @Plugin classes in the export packages will be included as plugin-->
              <_exportcontents>de.kp.works.*</_exportcontents>
            </instructions>
          </configuration>
          <executions>
            <execution>
              <phase>package</phase>
              <goals>
                <goal>bundle</goal>
              </goals>
            </execution>
          </executions>
        </plugin>
        <!-- maven antrum -->
       	<plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-antrun-plugin</artifactId>
          <version>1.7</version>
          <executions>
            <!-- Create the config file for artifacts which can be used to deploy the artifact.
                 Sets the parents field to system:cdap-etl-batch and system:cdap-etl-realtime with whatever
                 version range is set in the etl.versionRange property.
                 also sets a widget and doc property for each file contained in the widgets and docs directories. -->
            <execution>
              <id>create-artifact-config</id>
              <phase>prepare-package</phase>
              <configuration>
                <target>
                  <script language="javascript"> <![CDATA[

                  // for some reason, project.basedir evaluates to null if we just get the property here.
                  // so we set main.basedir to project.basedir in the pom properties, then main.basedir is used here
                  // where it evaluates correctly for whatever reason
                  var baseDir = project.getProperty("main.basedir");
                  var targetDir = project.getProperty("project.build.directory");
                  var artifactId = project.getProperty("project.artifactId");
                  var version = project.getProperty("project.version");

                  var cfgFile = new java.io.File(targetDir, artifactId + "-" + version + ".json");
                  if (!cfgFile.exists()) {
                    cfgFile.createNewFile();
                  }

                  var parents = project.getProperty("app.parents").split(",");
                  var config = {
                    "parents": [ ],
                    "properties": {}
                  }
                  for (i = 0; i < parents.length; i+=2) {
                    // because name1[lo,hi],name2[lo,hi] gets split into "name1[lo", "hi]", "name2[lo", "hi]"
                    // so we have to combine them again
                    config.parents.push(parents[i] + "," + parents[i+1]);
                  }

                  // look in widgets directory for widget config for each plugin
                  var widgetsDir = new java.io.File(baseDir, project.getProperty("widgets.dir"));
                  if (widgetsDir.isDirectory()) {
                    var widgetsFiles = widgetsDir.listFiles();
                    for (i = 0; i < widgetsFiles.length; i++) {
                      var widgetsFile = widgetsFiles[i];
                      if (widgetsFile.isFile()) {
                        var propertyName = "widgets." + widgetsFile.getName();
                        // if the filename ends with .json
                        if (propertyName.indexOf(".json", propertyName.length - 5) !== -1) {
                          // strip the .json
                          propertyName = propertyName.slice(0, -5);
                          var contents = new java.lang.String(java.nio.file.Files.readAllBytes(widgetsFile.toPath()), java.nio.charset.StandardCharsets.UTF_8);
                          var contentsAsJson = JSON.parse(contents);
                          config.properties[propertyName] = JSON.stringify(contentsAsJson);
                        }
                      }
                    }
                  }

                  // look in the docs directory for docs for each plugin
                  var docsDir = new java.io.File(baseDir, project.getProperty("docs.dir"));
                  if (docsDir.isDirectory()) {
                    var docFiles = docsDir.listFiles();
                    for (i = 0; i < docFiles.length; i++) {
                      var docFile = docFiles[i];
                      if (docFile.isFile()) {
                        var propertyName = "doc." + docFile.getName();
                        // if the filename ends with .md
                        if (propertyName.indexOf(".md", propertyName.length - 3) !== -1) {
                          // strip the extension
                          propertyName = propertyName.slice(0, -3);
                          var contents = new java.lang.String(java.nio.file.Files.readAllBytes(docFile.toPath()), java.nio.charset.StandardCharsets.UTF_8);
                          config.properties[propertyName] = contents + "";
                        }
                      }
                    }
                  }

                  var fw = new java.io.BufferedWriter(new java.io.FileWriter(cfgFile.getAbsoluteFile()));
                  fw.write(JSON.stringify(config, null, 2));
                  fw.close();
                  ]]></script>
                </target>
              </configuration>
              <goals>
                <goal>run</goal>
              </goals>
            </execution>
          </executions>
        </plugin>        
      </plugins>
     </pluginManagement>
  	<plugins>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-surefire-plugin</artifactId>
      </plugin>
      <plugin>
        <groupId>org.apache.felix</groupId>
        <artifactId>maven-bundle-plugin</artifactId>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-antrun-plugin</artifactId>
      </plugin>
  	</plugins>
  </build>
  
  <organization>
  	<name>Dr. Krusche &amp; Partner PartG</name>
  	<url>https://www.dr-kruscheundpartner.de</url>
  </organization>

</project>